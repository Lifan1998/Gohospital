package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import appoint.entity.Scheduling;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SCHEDULING".
*/
public class SchedulingDao extends AbstractDao<Scheduling, Void> {

    public static final String TABLENAME = "SCHEDULING";

    /**
     * Properties of entity Scheduling.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id_doctor = new Property(0, int.class, "id_doctor", false, "ID_DOCTOR");
        public final static Property Time = new Property(1, String.class, "time", false, "TIME");
        public final static Property Max = new Property(2, int.class, "max", false, "MAX");
    }


    public SchedulingDao(DaoConfig config) {
        super(config);
    }
    
    public SchedulingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SCHEDULING\" (" + //
                "\"ID_DOCTOR\" INTEGER NOT NULL ," + // 0: id_doctor
                "\"TIME\" TEXT," + // 1: time
                "\"MAX\" INTEGER NOT NULL );"); // 2: max
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SCHEDULING\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Scheduling entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId_doctor());
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(2, time);
        }
        stmt.bindLong(3, entity.getMax());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Scheduling entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId_doctor());
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(2, time);
        }
        stmt.bindLong(3, entity.getMax());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Scheduling readEntity(Cursor cursor, int offset) {
        Scheduling entity = new Scheduling( //
            cursor.getInt(offset + 0), // id_doctor
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // time
            cursor.getInt(offset + 2) // max
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Scheduling entity, int offset) {
        entity.setId_doctor(cursor.getInt(offset + 0));
        entity.setTime(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMax(cursor.getInt(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Scheduling entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Scheduling entity) {
        return null;
    }

    @Override
    public boolean hasKey(Scheduling entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
