package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import appoint.entity.Doctor;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DOCTOR".
*/
public class DoctorDao extends AbstractDao<Doctor, Void> {

    public static final String TABLENAME = "DOCTOR";

    /**
     * Properties of entity Doctor.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "id", false, "ID");
        public final static Property Imageurl = new Property(1, String.class, "imageurl", false, "IMAGEURL");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Id_hospital = new Property(3, int.class, "id_hospital", false, "ID_HOSPITAL");
        public final static Property Department = new Property(4, String.class, "department", false, "DEPARTMENT");
        public final static Property Group = new Property(5, String.class, "group", false, "GROUP");
        public final static Property Grade = new Property(6, String.class, "grade", false, "GRADE");
        public final static Property Score = new Property(7, String.class, "score", false, "SCORE");
        public final static Property Desc = new Property(8, String.class, "desc", false, "DESC");
        public final static Property Scheduing = new Property(9, String.class, "scheduing", false, "SCHEDUING");
    }


    public DoctorDao(DaoConfig config) {
        super(config);
    }
    
    public DoctorDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOCTOR\" (" + //
                "\"ID\" INTEGER NOT NULL ," + // 0: id
                "\"IMAGEURL\" TEXT," + // 1: imageurl
                "\"NAME\" TEXT," + // 2: name
                "\"ID_HOSPITAL\" INTEGER NOT NULL ," + // 3: id_hospital
                "\"DEPARTMENT\" TEXT," + // 4: department
                "\"GROUP\" TEXT," + // 5: group
                "\"GRADE\" TEXT," + // 6: grade
                "\"SCORE\" TEXT," + // 7: score
                "\"DESC\" TEXT," + // 8: desc
                "\"SCHEDUING\" TEXT);"); // 9: scheduing
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOCTOR\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Doctor entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String imageurl = entity.getImageurl();
        if (imageurl != null) {
            stmt.bindString(2, imageurl);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getId_hospital());
 
        String department = entity.getDepartment();
        if (department != null) {
            stmt.bindString(5, department);
        }
 
        String group = entity.getGroup();
        if (group != null) {
            stmt.bindString(6, group);
        }
 
        String grade = entity.getGrade();
        if (grade != null) {
            stmt.bindString(7, grade);
        }
 
        String score = entity.getScore();
        if (score != null) {
            stmt.bindString(8, score);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(9, desc);
        }
 
        String scheduing = entity.getScheduing();
        if (scheduing != null) {
            stmt.bindString(10, scheduing);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Doctor entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String imageurl = entity.getImageurl();
        if (imageurl != null) {
            stmt.bindString(2, imageurl);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getId_hospital());
 
        String department = entity.getDepartment();
        if (department != null) {
            stmt.bindString(5, department);
        }
 
        String group = entity.getGroup();
        if (group != null) {
            stmt.bindString(6, group);
        }
 
        String grade = entity.getGrade();
        if (grade != null) {
            stmt.bindString(7, grade);
        }
 
        String score = entity.getScore();
        if (score != null) {
            stmt.bindString(8, score);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(9, desc);
        }
 
        String scheduing = entity.getScheduing();
        if (scheduing != null) {
            stmt.bindString(10, scheduing);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Doctor readEntity(Cursor cursor, int offset) {
        Doctor entity = new Doctor( //
            cursor.getInt(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // imageurl
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.getInt(offset + 3), // id_hospital
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // department
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // group
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // grade
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // score
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // desc
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // scheduing
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Doctor entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setImageurl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setId_hospital(cursor.getInt(offset + 3));
        entity.setDepartment(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGroup(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGrade(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setScore(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDesc(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setScheduing(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Doctor entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Doctor entity) {
        return null;
    }

    @Override
    public boolean hasKey(Doctor entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
